openapi: 3.0.2
servers:
  - url: http://127.0.0.1:8081
info:
  description: This is API Doc for Angular+ NodeJS Movie Ticket 
  title: Swagger API Doc for Movie Ticket
  version: 1.0.0

tags:
  - name: Authentication
    description: Operations about Authentication
  - name: Password
    description: Operations about Password
  - name: Cinemas
    description: Operations about Cinemas
  - name: Movies
    description: Operations about Movies
  - name: Seats
    description: Operations about Seats
  - name: Tickets
    description: Operations aboutTickets
  - name: Users
    description: Operations about Users

paths:
  # Auth Routes
  /api/login:
    post:
      tags:
        - Authentication
      summary: Logs user into the system
      requestBody:
        description: Login User into the system
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "email@gmail.com"
                password:
                  type: string
                  format: password
                  example: "password123"
          application/xml:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "email@gmail.com"
                password:
                  type: string
                  format: password
                  example: "password123"
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "email@gmail.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        "200":
          description: Login Successfully.

  /api/logout:
    post:
      tags:
        - Authentication
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: Logout Successfully.

  /api/signup:
    post:
      tags:
        - Authentication
      summary: Sign Up
      requestBody:
        description: Signup user into the system
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: "UserOne"
                email:
                  type: string
                  example: "email@gmail.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        "200":
          description: Signup user Successfully.

  # Password Routes
  /api/forgot-password:
    post:
      tags:
        - Password
      summary: Forget Password
      requestBody:
        description: Enter email to get Password reset link
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "email@gmail.com"
      responses:
        "200":
          description: Password reset link sent to your email account

  /api/password-reset-update/{userId}/{token}:
    post:
      tags:
        - Password
      summary: Password Reset Update
      parameters:
        - name: userId
          in: path
          description: UserId id that want to change password
          required: true
          schema:
            type: string
        - name: token
          in: path
          description: Token of user who want to change password
          required: true
          schema:
            type: string
      requestBody:
        description: Forget Password Update
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "password123"
      responses:
        "200":
          description: Password reset sucessfully.

  /api/users/password-change/{userId}:
    post:
      tags:
        - Password
      summary: Password Change
      parameters:
        - name: userId
          in: path
          description: UserId id that want to change password
          required: true
          schema:
            type: string
      requestBody:
        description: Change old password with new one
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: "passwordold"
                newPassword:
                  type: string
                  example: "passwordnew"
                confirmPassword:
                  type: string
                  example: "passwordnew"
      responses:
        "200":
          description: Password Change Successfully
        "401":
          description: Current Password and New Password are same.
        "400":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Could not find user
  # Cinema Routes
  /api/cinemas:
    get:
      tags:
        - Cinemas
      summary: Get all cinemas
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns all cinemas
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - Cinemas
      summary: Create a new Cinema
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      requestBody:
        description: Create a new Cinema
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Cinema Name"
                created_user_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
          application/xml:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Cinema Name"
                created_user_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Cinema Name"
                created_user_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"

      # Sechma Insert Methods

      # requestBody:
      #   description: Create a new post
      #   required: true
      #   content:
      #     application/json:
      #         schema:
      #           $ref: '#/components/schemas/Post'
      #     application/xml:
      #         schema:
      #           $ref: '#/components/schemas/Post'
      #     application/x-www-form-urlencoded:
      #         schema:
      #           $ref: '#/components/schemas/Post'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Cinema Name"
                  created_user_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
            application/xml:
              schema:
                type: object
                properties:
                 name:
                    type: string
                    example: "Cinema Name"
                 created_user_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
        "405":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /api/cinemas/{cinemaId}:
    get:
      tags:
        - Cinemas
      summary: Find cinema by ID
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: getCinemaById
      parameters:
        - name: cinemaId
          in: path
          description: ID of cinema to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  name:
                    type: string
                    example: "Cinema Name"
                  created_user_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  _v:
                    type: number
                    example: 0
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
        "404":
          description: Cinema not found
    put:
      tags:
        - Cinemas
      summary: Update a cinema
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: updateCinemaId
      parameters:
        - name: cinemaId
          in: path
          description: ID of cinema to return
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing cinema
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Cinema Name"
                created_user_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
                updated_user_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
      responses:
        "200":
          description: Updated Successfully!
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  name:
                    type: string
                    example: " Cinema Name Updated"
                  created_user_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  updated_user_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
        "405":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - Cinemas
      summary: Delete a cinema
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: deleteCinema
      parameters:
        - name: cinemaId
          in: path
          description: Cinema id to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deleted Successfully!
        "400":
          description: Invalid cinema value

  #/api/cinemas/search:
    post:
      tags:
        - Cinemas
      summary: Get search cinemas
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: PageNumber 
          schema:
            type: number
        - name: ppp
          in: query
          description: Number of posts that want to show per Page
          schema:
            type: number
      requestBody:
        description: Title of the post that you want to search
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Post"
      responses:
        "200":
          description: Returns search Posts
        "400":
          description: An error occured
        "401":
          $ref: "#/components/responses/UnauthorizedError"


 # Movie Routes
  /api/movies:
    get:
      tags:
        - Movies
      summary: Get all movies
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns all movies
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - Movies
      summary: Create a new Movie
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      requestBody:
        description: Create a new Movie
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Movie Name"
                year:
                  type: number
                  example: 2022
                rating:
                  type: number
                  example: 7.5
                image:
                  type: string
                  example: "image.jpg"
                cinema_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
                time: 
                  type: string
                  example: "2:30 PM"
                status:
                  type: string
                  example: "Now Showing"
          application/xml:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Movie Name"
                year:
                  type: number
                  example: 2022
                rating:
                  type: number
                  example: 7.5
                image:
                  type: string
                  example: "image.jpg"
                cinema_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
                time: 
                  type: string
                  example: "2:30 PM"
                status:
                  type: string
                  example: "Now Showing"
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Movie Name"
                year:
                  type: number
                  example: 2022
                rating:
                  type: number
                  example: 7.5
                image:
                  type: string
                  example: "image.jpg"
                cinema_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
                time: 
                  type: string
                  example: "2:30 PM"
                status:
                  type: string
                  example: "Now Showing"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Movie Name"
                  year:
                    type: number
                    example: 2022
                  rating:
                    type: number
                    example: 7.5
                  image:
                    type: string
                    example: "image.jpg"
                  cinema_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  time: 
                    type: string
                    example: "2:30 PM"
                  status:
                    type: string
                    example: "Now Showing"
            application/xml:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Movie Name"
                  year:
                    type: number
                    example: 2022
                  rating:
                    type: number
                    example: 7.5
                  image:
                    type: string
                    example: "image.jpg"
                  cinema_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  time: 
                    type: string
                    example: "2:30 PM"
                  status:
                    type: string
                    example: "Now Showing"
        "405":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /api/movies/{movieId}:
    get:
      tags:
        - Movies
      summary: Find movie by ID
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: getMovieById
      parameters:
        - name: movieId
          in: path
          description: ID of movie to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  name:
                    type: string
                    example: "Movie Name"
                  year:
                    type: number
                    example: 2022
                  rating:
                    type: number
                    example: 7.5
                  image:
                    type: string
                    example: "image.jpg"
                  cinema_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  time: 
                    type: string
                    example: "2:30 PM"
                  status:
                    type: string
                    example: "Now Showing"
                  _v:
                    type: number
                    example: 0
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
        "404":
          description: Movie not found
    put:
      tags:
        - Movies
      summary: Update a movie
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: updateMovieId
      parameters:
        - name: movieId
          in: path
          description: ID of movie to return
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing movie
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Movie Name"
                year:
                  type: number
                  example: 2022
                rating:
                  type: number
                  example: 7.5
                image:
                  type: string
                  example: "image.jpg"
                cinema_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
                time: 
                  type: string
                  example: "2:30 PM"
                status:
                  type: string
                  example: "Now Showing"
      responses:
        "200":
          description: Updated Successfully!
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  name:
                    type: string
                    example: "Movie Name"
                  year:
                    type: number
                    example: 2022
                  rating:
                    type: number
                    example: 7.5
                  image:
                    type: string
                    example: "image.jpg"
                  cinema_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  time: 
                    type: string
                    example: "2:30 PM"
                  status:
                    type: string
                    example: "Now Showing"
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
        "405":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - Movies
      summary: Delete a movie
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: deleteMovie
      parameters:
        - name: movieId
          in: path
          description: Movie id to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deleted Successfully!
        "400":
          description: Invalid movie value

#Get Now Showing Movies 
  /api/movies/now-showing:
    get:
      tags:
        - Now Showing Movies
      summary: Get Now Showing movies
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns all  now showing movies
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      

 # Seat Routes
  /api/seats:
    get:
      tags:
        - Seats
      summary: Get all seats
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns all seats
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - Seats
      summary: Create a new Seat
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      requestBody:
        description: Create a new Seat
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                seatNumber:
                  type: string
                  example: "A1"
                price:
                  type: number
                  example: 3000
                status:
                  type: string
                  example: "sold out"
          application/xml:
            schema:
              type: object
              properties:
                 seatNumber:
                  type: string
                  example: "A1"
                 price:
                  type: number
                  example: 3000
                 status:
                  type: string
                  example: "sold out"
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                seatNumber:
                  type: string
                  example: "A1"
                price:
                  type: number
                  example: 3000
                status:
                  type: string
                  example: "sold out"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  seatNumber:
                    type: string
                    example: "A1"
                  price:
                    type: number
                    example: 3000
                  status:
                    type: string
                    example: "sold out"
            application/xml:
              schema:
                type: object
                properties:
                  seatNumber:
                    type: string
                    example: "A1"
                  price:
                    type: number
                    example: 3000
                  status:
                    type: string
                    example: "sold out"
        "405":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /api/seats/{seatId}:
    get:
      tags:
        - Seats
      summary: Find seat by ID
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: getSeatById
      parameters:
        - name: seatId
          in: path
          description: ID of seat to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  seatNumber:
                    type: string
                    example: "A1"
                  price:
                    type: number
                    example: 3000
                  status:
                    type: string
                    example: "sold out"
                  _v:
                    type: number
                    example: 0
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
        "404":
          description: Seat not found
    put:
      tags:
        - Seats
      summary: Update a seat
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: updateSeatId
      parameters:
        - name: seatId
          in: path
          description: ID of seat to return
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing seat
        content:
          application/json:
            schema:
              type: object
              properties:
                seatNumber:
                  type: string
                  example: "A1"
                price:
                  type: number
                  example: 3000
                status:
                  type: string
                  example: "sold out"
      responses:
        "200":
          description: Updated Successfully!
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  seatNumber:
                    type: string
                    example: "A1"
                  price:
                    type: number
                    example: 3000
                  status:
                    type: string
                    example: "sold out"
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
        "405":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - Seats
      summary: Delete a seat
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: deleteSeat
      parameters:
        - name: seatId
          in: path
          description: Seat id to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deleted Successfully!
        "400":
          description: Invalid seat value

 # Ticket Routes
  /api/tickets:
    get:
      tags:
        - Tickets
      summary: Get all tickets
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns all cinemas
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - Tickets
      summary: Create a new Ticket
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      requestBody:
        description: Create a new Ticket
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customerName:
                  type: string
                  example: "John Paul"
                movie_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
                cinema_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
                seatNumber:
                  type: string
                  example: "A1"
                date: 
                  type: string
                  example: "12/11/2015"
                time:
                  type: string
                  example: "2:30 PM"
                price:
                  type: number
                  example: 3000
                status:
                  type: string
                  example: "sold out"
          application/xml:
            schema:
              type: object
              properties:
                customerName:
                  type: string
                  example: "John Paul"
                movie_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
                cinema_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
                seatNumber:
                  type: string
                  example: "A1"
                date: 
                  type: string
                  example: "12/11/2015"
                time:
                  type: string
                  example: "2:30 PM"
                price:
                  type: number
                  example: 3000
                status:
                  type: string
                  example: "sold out"
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                customerName:
                  type: string
                  example: "John Paul"
                movie_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
                cinema_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
                seatNumber:
                  type: string
                  example: "A1"
                date: 
                  type: string
                  example: "12/11/2015"
                time:
                  type: string
                  example: "2:30 PM"
                price:
                  type: number
                  example: 3000
                status:
                  type: string
                  example: "sold out"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  customerName:
                    type: string
                    example: "John Paul"
                  movie_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  cinema_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  seatNumber:
                    type: string
                    example: "A1"
                  date: 
                    type: string
                    example: "12/11/2015"
                  time:
                    type: string
                    example: "2:30 PM"
                  price:
                    type: number
                    example: 3000
                  status:
                    type: string
                    example: "sold out"
            application/xml:
              schema:
                type: object
                properties:
                  customerName:
                    type: string
                    example: "John Paul"
                  movie_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  cinema_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  seatNumber:
                    type: string
                    example: "A1"
                  date: 
                    type: string
                    example: "12/11/2015"
                  time:
                    type: string
                    example: "2:30 PM"
                  price:
                    type: number
                    example: 3000
                  status:
                    type: string
                    example: "sold out"
        "405":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /api/tickets/{ticketId}:
    get:
      tags:
        - Tickets
      summary: Find ticket by ID
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: getTicketById
      parameters:
        - name: ticketId
          in: path
          description: ID of ticket to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  customerName:
                    type: string
                    example: "John Paul"
                  movie_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  cinema_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  seatNumber:
                    type: string
                    example: "A1"
                  date: 
                    type: string
                    example: "12/11/2015"
                  time:
                    type: string
                    example: "2:30 PM"
                  price:
                    type: number
                    example: 3000
                  status:
                    type: string
                    example: "sold out"
                  _v:
                    type: number
                    example: 0
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
        "404":
          description: Ticket not found
    put:
      tags:
        - Tickets
      summary: Update a ticket
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: updateTicketId
      parameters:
        - name: ticketId
          in: path
          description: ID of ticket to return
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing ticket
        content:
          application/json:
            schema:
              type: object
              properties:
                customerName:
                  type: string
                  example: "John Paul"
                movie_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
                cinema_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
                seatNumber:
                  type: string
                  example: "A1"
                date: 
                  type: string
                  example: "12/11/2015"
                time:
                  type: string
                  example: "2:30 PM"
                price:
                  type: number
                  example: 3000
                status:
                  type: string
                  example: "sold out"
      responses:
        "200":
          description: Updated Successfully!
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  customerName:
                    type: string
                    example: "John Paul"
                  movie_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  cinema_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  seatNumber:
                    type: string
                    example: "A1"
                  date: 
                    type: string
                    example: "12/11/2015"
                  time:
                    type: string
                    example: "2:30 PM"
                  price:
                    type: number
                    example: 3000
                  status:
                    type: string
                    example: "sold out"
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
        "405":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - Tickets
      summary: Delete a ticket
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: deleteTicket
      parameters:
        - name: ticketId
          in: path
          description: Ticket id to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deleted Successfully!
        "400":
          description: Invalid cinema value

  /api/tickets/{cinemaId}:
    post:
      tags:
        - Tickets
      summary: Find tickets with cinemaID
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      parameters:
        - name: cinemaId
          in: path
          description: ID of cinema to return
          required: true
          schema:
            type: string
      requestBody:
        description:  Find tickets with cinemaID
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date: 
                  type: string
                  example: "12/11/2015"
                time:
                  type: string
                  example: "2:30 PM"
          application/xml:
            schema:
              type: object
              properties:
                date: 
                  type: string
                  example: "12/11/2015"
                time:
                  type: string
                  example: "2:30 PM"
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                date: 
                  type: string
                  example: "12/11/2015"
                time:
                  type: string
                  example: "2:30 PM"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  customerName:
                    type: string
                    example: "John Paul"
                  movie_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  cinema_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  seatNumber:
                    type: string
                    example: "A1"
                  date: 
                    type: string
                    example: "12/11/2015"
                  time:
                    type: string
                    example: "2:30 PM"
                  price:
                    type: number
                    example: 3000
                  status:
                    type: string
                    example: "sold out"
            application/xml:
              schema:
                type: object
                properties:
                  customerName:
                    type: string
                    example: "John Paul"
                  movie_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  cinema_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  seatNumber:
                    type: string
                    example: "A1"
                  date: 
                    type: string
                    example: "12/11/2015"
                  time:
                    type: string
                    example: "2:30 PM"
                  price:
                    type: number
                    example: 3000
                  status:
                    type: string
                    example: "sold out"
        "405":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"

#Get Dashboard
  /api/tickets/dashboard:
    post:
          tags:
            - Dashboard
          summary: Show data on dashboard
          description: This can only be done by the logged in user.
          security:
            - bearerAuth: []
          requestBody:
            description:  Show data on dashboard
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    date: 
                      type: string
                      example: "12/11/2015"
                    time:
                      type: string
                      example: "2:30 PM"
              application/xml:
                schema:
                  type: object
                  properties:
                    date: 
                      type: string
                      example: "12/11/2015"
                    time:
                      type: string
                      example: "2:30 PM"
              application/x-www-form-urlencoded:
                schema:
                  type: object
                  properties:
                    date: 
                      type: string
                      example: "12/11/2015"
                    time:
                      type: string
                      example: "2:30 PM"
          responses:
            "200":
              description: Successful operation
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      cinemaName:
                        type: string
                        example: "Cinema Name"
                      movieName:
                        type: string
                        example: "Movie Name"
                      seatNumber:
                        type: string
                        example: "A1"
                      date: 
                        type: string
                        example: "12/11/2015"
                      time:
                        type: string
                        example: "2:30 PM"
                application/xml:
                  schema:
                    type: object
                    properties:
                      cinemaName:
                        type: string
                        example: "Cinema Name"
                      movieName:
                        type: string
                        example: "Movie Name"
                      seatNumber:
                        type: string
                        example: "A1"
                      date: 
                        type: string
                        example: "12/11/2015"
                      time:
                        type: string
                        example: "2:30 PM"
            "405":
              description: Invalid input
            "401":
              $ref: "#/components/responses/UnauthorizedError"
      


  # User Routes
  /api/users:
    get:
      tags:
        - Users
      summary: Get all Users
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      #parameters:
      responses:
        "200":
          description: Returns all Users
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - Users
      summary: Create user
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: createUser
      requestBody:
        description: Created user
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: "User01"
                email:
                  type: string
                  example: "Description01"
                password:
                  type: string
                  format: password
                  example: "password123"
                type:
                  type: string
                  description: User Roles
                  enum:
                    - Admin
                    - User
                phone:
                  type: string
                  example: "0912345678"
                dob:
                  type: string
                  format: date
                  example: 12/11/2015
                address:
                  type: string
                  example: "Address"
                profile:
                  type: string
                  example: "apiuploads/0fe05c06-2f9d-4056-b80d-ffa37dee7c93_img1.jpg"
          application/xml:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: "User01"
                email:
                  type: string
                  example: "Description01"
                password:
                  type: string
                  format: password
                  example: "password123"
                type:
                  type: string
                  description: User Roles
                  enum:
                    - Admin
                    - User
                phone:
                  type: string
                  example: "0912345678"
                dob:
                  type: string
                  format: date
                  example: 12/11/2015
                address:
                  type: string
                  example: "Address"
                profile:
                  type: string
                  example: "apiuploads/0fe05c06-2f9d-4056-b80d-ffa37dee7c93_img1.jpg"
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: "User01"
                email:
                  type: string
                  example: "Description01"
                password:
                  type: string
                  format: password
                  example: "password123"
                type:
                  type: string
                  description: User Roles
                  enum:
                    - Admin
                    - User
                phone:
                  type: string
                  example: "0912345678"
                dob:
                  type: string
                  format: date
                  example: 12/11/2015
                address:
                  type: string
                  example: "Address"
                profile:
                  type: string
                  example: "apiuploads/0fe05c06-2f9d-4056-b80d-ffa37dee7c93_img1.jpg"
      responses:
        "200":
          description: Created User Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  fullName:
                    type: string
                  email:
                    type: string
                  password:
                    type: string
                    format: password
                  type:
                    type: string
                  phone:
                    type: string
                  dob:
                    type: string
                    format: date
                  address:
                    type: string
                  profile:
                    type: string
                  _id:
                    type: string
                  createdAt:
                    type: string
                  updatedAt:
                    type: string
                  _v:
                    type: number
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /api/users/{userId}:
    post:
      tags:
        - Users
      summary: Find user by ID
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "62c6a49a087a13d74076e514"
                  fullName:
                    type: string
                    example: "User One"
                  email:
                    type: string
                    example: "userone@gmail.com"
                  password:
                    type: string
                    format: password
                    example: "password123"
                  type:
                    type: string
                    description: User Roles
                    enum:
                      - Admin
                      - User
                  phone:
                    type: string
                    example: "0912345678"
                  dob:
                    type: string
                    format: date
                  address:
                    type: string
                    example: "Address"
                  profile:
                    type: string
                    example: "apiuploads/0fe05c06-2f9d-4056-b80d-ffa37dee7c93_img1.jpg"
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
        "404":
          description: User not found
    put:
      tags:
        - Users
      summary: Update a user
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: updateUserId
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing user data
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: "User One"
                email:
                  type: string
                  example: "Description01"
                type:
                  type: string
                  description: User Roles
                  enum:
                    - Admin
                    - User
                phone:
                  type: string
                  example: "0912345678"
                dob:
                  type: string
                  format: date
                address:
                  type: string
                  example: "Address"
                profile:
                  type: string
                  example: "apiuploads/0fe05c06-2f9d-4056-b80d-ffa37dee7c93_img1.jpg"
                created_user_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
                updated_user_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
      responses:
        "200":
          description: Updated Successfully!
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  fullName:
                    type: string
                    example: "User One"
                  email:
                    type: string
                    example: "Description01"
                  password:
                    type: string
                    format: password
                    example: "password123"
                  type:
                    type: string
                    description: User Roles
                    enum:
                      - Admin
                      - User
                  phone:
                    type: string
                    example: "0912345678"
                  dob:
                    type: string
                    format: date
                  address:
                    type: string
                    example: "Address"
                  profile:
                    type: string
                    example: "apiuploads/0fe05c06-2f9d-4056-b80d-ffa37dee7c93_img1.jpg"
                  created_user_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  updated_user_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
        "405":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - Users
      summary: Deletes a user
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deleted User Successfully!
        "400":
          description: Invalid post value


components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

# 2) Apply the security globally to all operations
security:
  - bearerAuth: []
